string:
    new line
    single quote in double quote
    double quote in single quote
    formatting
    backslash
improvements:
    class for non-terminal nodes
    class for terminal nodes
    function for take action on loop
    etc
ما تقطش أسطر بال compound statement


//////////////////////

Sides = {
    "UP"    : [0 ,      68,      0 ,    151]
    "RIGHT" : [17,      85,     -8 ,    143]
    "DOWN"  : [34,      102,    -16,    135]
    "LEFT"  : [52,      119,    -24,    127]
}

//UP: [-8  ==>  0 [ , [0  ==> 68 ] , [142 ==> 151]
//UP: [-16 ==> -8 [ , [17 ==> 85 ] , [136 ==> 143]
//UP: [-24 ==> -16[ , [34 ==> 102] , [128 ==> 135]
//UP: [-32 ==> -24[ , [52 ==> 119] , [120 ==> 127]

safeIndex = [
    3, 14, 20, 31, 37, 48, 54, 65
]

prob = [
    0,
    1, 1, 1, 1, 1, 1,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    5, 5, 5, 5, 5, 5,
    6,
]

function convertToMap(int num, side)
{
    int index = num - side[0]
    if(num < 0 || index >= 69)
        return num
    else
        return index
}

function getDice(){
    return prob[floor(64 * rand(0,1))]
    // return prob[rand(0,64)]
}

function getSteps(int num){
    switch(num){
        case 0:
            return 12
        case 1:
            return 24
        case 2:
            return 4
        case 3:
            return 3
        case 4:
            return 2
        case 5:
            return 10
        case 6:
            return 6
    }
}

function getNextState(){
    int dice = getDice()
    int steps = getSteps(dice)
    //check turn of player
    array availableSteps = getAvailableSteps()
    //get infos from user or logic from computer
    move(stone, steps)
    realStones = convertToMap(stones[stone], side)
    updateStepsRemaining(stone)
    hasExtra = false
}

class Player
{
    bool isTurn = false // could not have default value
    side = null // could not have default value
    bool hasExtra = false // could not have default value
    int dice = -1 // could not have default value
    int steps = -1 // could not have default value
    array stones = [null, null, null, null] // could not have default value
    array stepsRemaining = [1, 1, 1, 1] // could not have default value
    array realStones = [null, null, null, null] // could not have default value

    public function Player(side, bool isTurn)
    {
        this->side = side
        this->isTurn = isTurn
        for (i = 0; i < size(this->stones); i++) {
            this->stones[i] = this->side[2] - 8
            this->realStones[i] = convertToMap(this->stones[i], this->side)
        }
    }

    public function hasArrived(int num): bool
    {
        if ( num == this->side[3])
            return true
    }

    public function hasWon(): bool
    {
        for (i = 0; i < size(this->stones); i++) {
            if(!this->hasArrived(this->stones[i]))
                return false
        }
        return true
    }

    public function getAvailableSteps(): array
    {
        a = stones
        foreach (a as value) {
            value = [0]
        }

        if (this->hasExtra)
            for (i = 0; i < size(this->stones); i++) {
                if(this->stepsRemaining[i] > 0)
                    a[i] = [1]
            }
        
        for (i = 0; i < size(this->stones); i++) {
            if (this->stepsRemaining[i] > this->steps) {
                a[i] = [this->steps]
                if (this->hasExtra) {
                    a[i][] = this->steps + 1
                }
            }
            else if (this->stepsRemaining[i] == this->steps) {
                a[i] = [this->steps]
            }
        }

        return a
    }

    public function move(int index, int steps)
    {
        stone = this->stones[index]
        newIndex = stone + steps
        if (stone < 0) {
            if (newIndex >= this->side[2]) {
                this->stones[index] = this->side[0] + abs(this->side[2] - newIndex)
            }
            //return this->stones[index]
        }
        elseif(newIndex > this->side[1]){
            this->stones[index] = this->side[3] - (8 - (newIndex - this->side[1]))
            //return this->stones[index]
        }
    }

    public function updateStepsRemaining(int index)
    {
        this->stepsRemaining[index] = 83 - this->stepsRemaining[index]
    }
}


//Ask User about Side
//Ask User about Turn
//Get infos and Calculate for Computer's

Player user = new Player(side1,isTurn)
Player computer = new Player(side2,!isTurn)